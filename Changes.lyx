#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A Transient Renderer based on Pbrt
\end_layout

\begin_layout Section
Base
\end_layout

\begin_layout Standard
All modifications are based on the 
\family typewriter
master
\family default
 (which includes changes not found in the 
\family typewriter
book
\family default
 branch
\family typewriter
)
\family default
branch of the official pbrt3 repository.
 Changes from the 
\family typewriter
master
\family default
 branch are to be regularly checked into the transient rendering branch,
 thus it should always be based on the most up to date version.
\end_layout

\begin_layout Section
New Concepts
\end_layout

\begin_layout Subsection
Sample sum normalization
\end_layout

\begin_layout Standard
The sum of sample values is normalized to account for different amounts
 of samples (i.e.
 if the scene is rendered with 4 times as many samples, it should have the
 same brightness (but less noise)).
 It is not sufficient, to just divide by a static number of samples, as
 different pixels have a different sampling density due to filtering.
 Edge pixels won't get any contribution from pixels outside the image and
 by randomizing the ray origin and direction, the density varies slightly
 in general.
 Thus in pbrt, each pixel sums up the filter weights and the pixel value
 is divided by this number in the end.
\end_layout

\begin_layout Standard
In our case, we cannot sample the time dimension explicitly.
 This means, that we do have a importance sampling in the time domain (but
 not in the spatial dimensions), and more samples mean more light.
 Thus, the correct solution is to store the weights not per transient pixel,
 but per 
\begin_inset Quotes eld
\end_inset

spatial
\begin_inset Quotes erd
\end_inset

 pixel, i.e.
 one weight value for each x,y coordinate.
 Every time bin of a single spatial pixel is then divided by the same accumulate
d weight for this pixel.
\end_layout

\begin_layout Subsection
Filtering in the transient dimension
\end_layout

\begin_layout Standard
Just as in the two spatial dimensions wee need filtering in the spatial
 dimension to avoid implicit box filtering.
 The same principles apply as in spatial filtering.
 As simplification, we use the filter table that is already stored for spatial
 filtering.
 In the future it might be possible to specify a different filter or filter
 size for the temporal dimension, but for now using the same values is fine.
\end_layout

\begin_layout Section
Modifications
\end_layout

\begin_layout Subsection
Minor modifications
\end_layout

\begin_layout Itemize
some changes to the build system and 
\family typewriter
CMakeLists.txt
\end_layout

\begin_layout Itemize
different startup message
\end_layout

\begin_layout Subsection
Transient Film
\end_layout

\begin_layout Standard
A class to store the transient images.
\end_layout

\begin_layout Subsubsection
Design Choice
\end_layout

\begin_layout Standard
The main challenge is, that pbrt was written with the computation of 2D
 images in mind.
 Thus, there currently is only a single film class (
\family typewriter
Film
\family default
), and its interface heavily assumes 2D images.
 We can't derive from it, as it creates the pixel storage already in the
 ctor and we would end up having two image buffers.
 We can also not create a common base class, because it would still need
 to have the 2D image interface, which is directly used by pretty much everyone.
 A clean way of implementing it would require to categorize the integrators
 somehow in two different types, each using the appropriate type of film.
 However, we want a minimal changes branch from pbrt to make it easier for
 new people to jump in and use it.
\end_layout

\begin_layout Standard
It would be nice, to just ignore the film in the camera class and use or
 own.
 Unfortunately, the film is deeply connected to other parts of pbrt.
 The camera itself and sampler use its properties, so it cannot simply be
 removed.
\end_layout

\begin_layout Standard
So we create a new class, 
\family typewriter
TransientFilm
\family default
.
 The 
\family typewriter
TransientFilm
\family default
 class is implemented analogues to the 
\family typewriter
Film
\family default
 class, however with the required changes in the interface to account for
 transient images.
 
\family typewriter
TransientFilm
\family default
 is not related to 
\family typewriter
Film
\family default
 in any ways (through the usual OOP ways), but just a very similar class.
 For its initialization, the same parameters as the ones for 
\family typewriter
Film
\family default
 are used.
 It is then stored as a member object of 
\family typewriter
TransientPathIntegrator
\family default
 and used inside its 
\family typewriter
Render
\family default
 method.
\end_layout

\begin_layout Standard
The downside is, that we still have the old 
\family typewriter
Film
\family default
 object, which is unused except for its parameters which are used all over
 pbrt.
 However, the framebuffer is not too big and thus the memory waste is negligible.
 It is also nicer, to have all the stuff, that we don't use (the 2D framebuffer)
 in a completely different object, rather than in the same (as would happen,
 if we used it as a base class).
 On the upside, this solution only require minimal changes to pbrt and two
 additional files, which are implemented more or less analogeously to their
 counterparts.
\end_layout

\begin_layout Subsubsection
Differences to TransientFilm
\end_layout

\begin_layout Itemize
pixel data are now 3D (crop window is still 2d though, as we only implicitly
 sample the time dimension)
\end_layout

\begin_layout Itemize
additional temporal filter (maybe the same as the image filter, maybe a
 different one)
\end_layout

\begin_layout Itemize
film tiles are supplied as usual (though they have a new pixel format now,
 obviously)
\end_layout

\begin_layout Itemize

\family typewriter
AddSplat
\family default
 is removed as it is not used by the path tracer (might be used later for
 bidirectional path tracing or so)
\end_layout

\begin_layout Itemize

\family typewriter
WriteImage
\family default
 does so in a transient image format
\end_layout

\begin_layout Itemize
Filtering: additional filter for the temporal dimension.
 For now independent from the image filter
\end_layout

\begin_layout Subsubsection
TransientFilmTile
\end_layout

\begin_layout Standard
has an aditional tresolution parameter.
 As time bins are not sampled directly, cropping would not make sense, which
 is why we keep the original 2d pixel bounds.
\end_layout

\begin_layout Subsubsection
API
\end_layout

\begin_layout Standard
The only changes in the API are in the part where the Integrator is created.
 As all TransientFilm parameters are now stored in the TransientPathIntegrator
 properties, the TransientFilm is created in the same block (and before)
 the TransientPathIntegrator.
 Thus, the changes to the API are minimal.
\end_layout

\begin_layout Subsubsection
Integrator support
\end_layout

\begin_layout Standard
By removing the splat- and SetImage functionality, TransientFilm does not
 support some of the advanced integrators.
 Maybe this functionality needs to be readded, if they are to be used in
 the future.
\end_layout

\begin_layout Subsection
Transient Path
\end_layout

\begin_layout Standard
TransientPathIntegrator is a combination of SamplerIntegrator and PathIntegrator
, but for the transient case.
\end_layout

\begin_layout Standard
At its core, it extends PathIntegrator to also compute the distances of
 the rays.
 However, to increase efficiency, PathIntegrator::Li computes not only the
 light along the complete path, but also computes direct illuminations of
 all sub paths.
 All contributions are added and returned to SamplerIntegrator::Render.
 In our case however, each subpath has a different length, and we need to
 return multiple samples, which is the reason why we also have to change
 the SamplerIntegrator::Render method.
\end_layout

\begin_layout Standard
Apart from the Render method (which we need to change), SamplerIntegrator
 only has some helper functions, that we do not use.
 Hence we combine our changes to PathIntegrator and SamplerIntegrator to
 a single class TransientPathIntegrator.
\end_layout

\begin_layout Itemize
Li does not only return a single intensity, but writes a intensity for each
 path segment (as they can no longer just be added any more)
\end_layout

\begin_layout Itemize

\family typewriter
FilmParameters
\family default
: As this integrator manages its own film (usually, the camera does this),
 it also needs to initialize it.
 Thus, upon creating of the transientPath integrator, all parameters for
 the film are parsed and stored in this very structure, which is later used
 to initialize the filter in the 
\family typewriter
Render
\family default
 method.
\end_layout

\begin_layout Section
Limitations
\end_layout

\begin_layout Subsection
Spectral rendering
\end_layout

\begin_layout Standard
For now, we do not support spectral rendering, i.e.
 colors.
 It would be cool, to see the dyed reflections from differently colored
 objects appear one after the other and could be helpful for quite some
 visualizations.
 But there is no camera on the market, that could measure those, so it is
 not very useful for synthetic data generation.
\end_layout

\begin_layout Standard
In the future, this could be a cool project.
 But it is really straightforward to implement and would be good for nothing
 but a few plots.
\end_layout

\end_body
\end_document
